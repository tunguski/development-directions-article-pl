# Jakość kodu

> Projekt może psuć się *"od dołu"* - przez spadek jakości kodu rozumianego 
> jako pojedyńcze linijki oraz ich grupy - oraz *"od góry"* - poprzez błędy w
> architekturze rozwiązania i strategicznych decyzjach.
> 
> W tej sekcji zajmiemy się problemem zachowania jakości w **małej** skali.


## Problem

Mając przed oczami pięć linijek kodu łatwo ulec złudzeniu, że jest to prosty 
fragment aplikacji, a więc nie wymaga wielkiej dbałości. Kiedy takich 
pięciolinijkowców w aplikacji są już dziesiątki tysięcy nikt nie pamięta, że 
wydawały się one proste.

Programiści mają bardzo złudne oceny w stosunku do kodu nad którym aktualnie 
pracują.

###Pomijane elementy małej skali:

* Pokrycie testami zbliżone do 100%.
* Dokumentowanie wszystkich nietrywialnych metod.
* Pilnowanie jakości kodu poprzez weryfikację zgodności z regułami.

### Banalne reguły zaskakująco często zapominane:

* **Automatyczne mierniki jakości** - np.: CheckStyle, FindBugs, Sonar Qube
* **Pełne i ciągłe weryfikowanie jakości** - Continuous Integration
* **KISS** - dosłownie wszystko musi być proste, co wcale nie jest prostym 
  celem
* **DRY** - reguła wymuszająca generalizację

## Cel

### Krótkofalowy

Wprowadzenie automatycznej weryfikacji czy i z jakich technik utrzymywania 
jakości kodu korzysta dany projekt.


### Długofalowy

* Pełna kontrola nad całym obszarem projektowym zdefiniowana przez minimalną 
  konfiguracje. W przypadku projektów Maven ideałem jest `parent-pom` jako 
  wylaczne źródlo konfiguracji walidacji.
* Jedna strona web agregująca zbiorcze informacje dla wszystkich projektów, 
  niezależnie od ich liczby.

## Droga

1. Centralny serwer repozytoriów kodu - `Gitlab` (albo inny w duchu github).
1. Jednolite zarządzanie strukturą projektów:
    * `Java` - wszystkie projekty pod kontrolą Maven'a.
    * `Javascript` - wszystkie projekty pod kontrolą Grunta.
1. Centralny serwer `Gitlab CI`.
1. Poprzez haki gita każdy commit jest budowany i weryfikowany pod wzgledem
   zgodności z metrykami (`CheckStyle`, `PMD`, `FindBugs`).
    * Dla każdej z metryk zostaje wykonany test i wrzucony komentarz z 
      informacją o pozytywnym lub negatywnym wyniku.
    * Dla każdego commita wykonywane są automatyczne testy integracyjne - 
      informacja o przejściu lub nie zostaje zamieszczona w Pull Requeście jako
      komentarz.
1. Ujednolicenie konfiguracji projektów. Docelowo wszystkie wykryte repozytoria
   git powinny byc budowane w identyczny sposób (wylącznie zmienna definiująca
   typ budowania - dev/prod itp).
1. Wspólny `parent-pom` dla wszystkich projektów. Wymuszona weryfikacja 
   CheckStyle.
1. Monitoring poziomu spelnienia warunków CS przez poszczególne projekty.
1. Monitoring pelnego procesu budowania dla każdego z projektów wykrytych w 
   repo.



